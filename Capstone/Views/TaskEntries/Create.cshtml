@model Domain.TaskEntry

@{
    ViewData["Title"] = "Create";
}



<h4>Task Entry</h4>
<hr />
<section>
    <div class="box">
        <form asp-action="Create" asp-controller="TaskEntries" method="post">
            <fieldset>

                <label asp-for="TaskType" class="control-label">Task Type:</label>
                <p><label class="choice"> <input type="radio" name="tasktype" required value="call">Call</label></p>
                <p><label class="choice"> <input type="radio" name="tasktype" required value="email">Email</label></p>
                <p><label class="choice"> <input type="radio" name="tasktype" required value="meeting">Meeting</label></p>
                <p><label class="choice"> <input type="radio" name="tasktype" required value="other">Other</label></p>
            </fieldset>
            <div class="row">
                <div class="col-md-4">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div action="/html/tags/html_form_tag_action.cfm" method="post"></div>
                </div>
            </div>
            <div class="form-group">
                <p>Task Time Tracker</p>
                <p id="output"></p>
                <input asp-for="TaskTime" class="form-control" id="taskTime" type="hidden" />
                <span asp-validation-for="TaskTime" class="text-danger"></span>
            </div>
                <div id="controls">
                    <text id="output"></text>
                    <input type="button" id="startPauseButton" onclick="startPause()" value="Start" />
                    <input type="button" id="resetButton" onclick="resetStopWatch()" value="Reset" />
                </div>
            <br>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </form>
        <div>
            <a asp-action="Index">Back to List</a>
        </div>
    </div>
</section>
<script type="text/javascript">
    var time = 0;
    var secs = 0;
    var running = 0;

    function startPause() {
        if (running == 0) {
            running = 1;
            increment();
            document.getElementById("startPauseButton").value = "Pause";
        }
        else {
            running = 0;
            document.getElementById("startPauseButton").value = "Resume";
        }
    }

    function resetStopWatch() {
        running = 0;
        time = 0;
        secs = 0;
        document.getElementById("startPauseButton").value = "Start";
        document.getElementById("output").innerHTML = "";
        document.getElementById("taskTime").value = 0;
    }

    function increment() {
        if (running == 1) {
            setTimeout(function () {
                time++;
                var mins = Math.floor(time / 10 / 60);
                var secs = Math.floor(time / 10 % 60);
                var tenths = time % 10;
                if (mins < 10) {
                    mins = "0" + mins;
                }
                if (secs < 10) {
                    secs = "0" + secs;
                }
                document.getElementById("output").innerHTML = mins + ":" + secs + ":" + "0" + tenths;
                document.getElementById("taskTime").value = mins;
                increment();
            }, 100);
        }
    }
</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
